#!/bin/bash
set -u
set -e
NAME="debian_sid_post_install"
DESCRIPTION="unstable/sid configuration"
# ---------- DEB OPTIONS ---------- #
ARCH=$(dpkg --print-architecture)
PREFER="/etc/apt/preferences"
LIST="/etc/apt/sources.list"
DEB="http://http.debian.net/debian/" 
TEST="jessie"
# --------------------------------- #
GITHUB="https://github.com/vonbrownie"
SOURCE="${GITHUB}/linux-post-install/blob/master/debian_sid_post_install"
# Notes
# * Install Debian Wheezy Screenshot Tour
#   http://www.circuidipity.com/install-debian-wheezy-screenshot-tour.html

# LICENSE
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License (GPLv2) published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.

greeting() {
clear
cat << _EOF_

==== $NAME - $DESCRIPTION ====

Howdy! Ideally this script is run following a fresh installation of
Debian GNU/Linux.

See: "Install Debian Wheezy Screenshot Tour"
http://www.circuidipity.com/install-debian-wheezy-screenshot-tour.html

This system will be configured to track Debian's unstable/sid branch
with the option of installing the lightweight Openbox window manager
+ extra apps suitable for a desktop environment.

_EOF_
}

penguinista() {
cat << _EOF_

(O<
(/)_
_EOF_
}

test_root() {
if [[ $UID -ne 0 ]]
then
    printf "\n$( penguinista ) .: $NAME requires ROOT privileges to do its job.\n"
    exit 1
fi
}

interface_found() {
ip link | awk '/mtu/ {gsub(":",""); printf "\t%s", $2} END {printf "\n"}'
}

test_connect() {
if ! $(ip addr show | grep "state UP" &>/dev/null)
then
    printf "\n$( penguinista ) .: $NAME requires an active network interface."
    printf "\nINTERFACES FOUND\n"
    interface_found
    exit 1
fi
}

test_condition() {
test_root
test_connect
}

invalid_reply() {
printf "\n'$REPLY' is invalid input...\n"
}

invalid_reply_yn() {
printf "\n'$REPLY' is invalid input. Please select 'Y(es)' or 'N(o)'...\n"
}

confirm_start() {
while :
do
    read -n 1 -p "Run script now? [yN] > "
    if [[ $REPLY == [yY] ]]
    then
        printf "\nLet's roll then ...\n"
        sleep 2
        break
    elif [[ $REPLY == [nN] || $REPLY == "" ]]
    then
        penguinista
        exit
    else
        invalid_reply_yn
    fi
done
}

config_prefer() {
cat > $PREFER << _EOF_
# Configure default preferences in package installation
# * unlisted repositories are auto-ranked 500
# * installed packages are ranked 100

Package: *
Pin: release a=unstable
Pin-Priority: 900

Package: *
Pin: release a=experimental
Pin-Priority: 1
_EOF_
}

apt_prefer() {
if [[ -e $PREFER ]]
then
    cp $PREFER ${PREFER}.$(date +%Y%m%dT%H%M%S).bak
fi
config_prefer
}

config_source() {
cat > $LIST << _EOF_
### unstable ###
deb $DEB unstable main contrib non-free
deb-src $DEB unstable main contrib non-free

### $TEST ###
deb $DEB $TEST main contrib non-free
#deb-src $DEB $TEST main contrib non-free

### $TEST security ###
deb http://security.debian.org/ $TEST/updates main contrib non-free
#deb-src http://security.debian.org/ $TEST/updates main contrib non-free

### experimental ###
deb $DEB experimental main

### multimedia ###
deb http://www.deb-multimedia.org unstable main non-free
_EOF_
clear
apt-get update
}

apt_source() {
if [[ -e $LIST ]]
then
    cp $LIST ${LIST}.$(date +%Y%m%dT%H%M%S).bak
fi
config_source
}

apt_key() {
clear
apt-get install -y debian-archive-keyring
apt-get install deb-multimedia-keyring
apt-get install pkg-mozilla-archive-keyring
apt-get update
apt-get dist-upgrade
}

apt_purge() {
local PURGE
PURGE="gdm3 gnome-system-tools notification-daemon tumbler* libtumbler*"
clear
apt-get --purge remove $PURGE
}

pkg_console() {
local CONSOLE
CONSOLE="apt-file apt-listbugs apt-listchanges acpi acpi-support acpitool \
anacron colordiff console-setup cowsay dkms dosfstools gpm htop \
input-utils ntfs-3g lxsplit par2 p7zip-full unrar unzip rsync sudo sl \
sysv-rc-conf tmux vim ssh-askpass keychain whois"
clear
apt-get install -y $CONSOLE
}

pkg_desktop() {
    :
}

pkg_openbox() {
    :
}

pkg_theme() {
    :
}

pkg_dvd() {
local DVD
DVD="cd-discid k3b libdvdcss2 libdvdnav4 libdvdread4"
clear
cat << _EOF_
K3b is a useful program for burning CD/DVDs. If this computer includes
an optical drive it is a good program to have installed.

_EOF_
while :
do
    read -n 1 -p "Install k3b? [Yn] > "
    if [[ "$REPLY" == [yY] || "$REPLY" == "" ]]
    then
        printf "\nOK. Installing k3b...\n"
        sleep 2
        apt-get install -y $DVD
        break
    elif [[ "$REPLY" == [nN] ]]
    then
        printf "\nOK. Skipping over k3b...\n"
        sleep 2
        break
    else
        invalid_reply_yn
    fi  
done
}

pkg_experiment() {
local EX
EX="iceweasel"
clear
apt-get -t experimental -y install $EX
}

pkg_third_party() {
# Crunchbang Linux
# ================
local CRUNCHBANG
CRUNCHBANG="http://packages.crunchbang.org/waldorf/pool/main"
# pnmixer - volume mixer for the system tray
local PNMIXER
PNMIXER="pnmixer_0.5.1-crunchbang1_${ARCH}.deb"
wget ${CRUNCHBANG}/${PNMIXER}
dpkg -i $PNMIXER
rm $PNMIXER
# crunchbang icons
local ICONCR
ICONCR="faenza-crunchbang-icon-theme_1.2-crunchang1_all.deb"
wget ${CRUNCHBANG}/${ICONCR}
dpkg -i $ICONCR
rm $ICONCR
}

config_desktop() {
    :
}

config_blacklist() {
    :
}

config_alternative() {
    :
}

config_group() {
    :
}

config_timezone() {
    :
}

au_revoir() {
clear
printf "$( penguinista ) .: All done!\n"
}

#: START
test_condition
greeting
confirm_start

#: APT
#apt_prefer
#apt_source
#apt_key
pkg_third_party

#: CONFIGURE
#config_desktop
#config_blacklist
#config_alternative
#config_group
#config_timezone

#: FINISH
#apt_purge
#au_revoir
