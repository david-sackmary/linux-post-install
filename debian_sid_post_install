#!/bin/bash
set -u
set -e
NAME="debian_sid_post_install"
DESCRIPTION="unstable/sid branch configuration"
# ---------- DEB OPTIONS ---------- #
ARCH=$(dpkg --print-architecture)
APTCACHE="/var/cache/apt/archives"
PREFER="/etc/apt/preferences"
LIST="/etc/apt/sources.list"
DEB="http://http.debian.net/debian/" 
TEST="jessie"
# --------------------------------- #
GITHUB="https://github.com/vonbrownie"
SOURCE="${GITHUB}/linux-post-install/blob/master/debian_sid_post_install"
# Notes
# * Install Debian Wheezy Screenshot Tour
#   http://www.circuidipity.com/install-debian-wheezy-screenshot-tour.html

# LICENSE
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License (GPLv2) published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.

penguinista() {
cat << _EOF_

(O<
(/)_
_EOF_
}

greeting() {
clear
cat << _EOF_

$( penguinista ) .: $NAME -- $DESCRIPTION :.

Howdy! Ideally this script is run following a fresh installation of
Debian GNU/Linux.

See: "Install Debian Wheezy Screenshot Tour"
http://www.circuidipity.com/install-debian-wheezy-screenshot-tour.html

This system will be configured to track Debian's unstable/sid branch
with the option of installing the Openbox window manager + extra apps
suitable for a desktop environment.

_EOF_
}

test_root() {
if [[ $UID -ne 0 ]]
then
    printf "\n$( penguinista ) .: $NAME requires ROOT privileges to do its job.\n"
    exit 1
fi
}

interface_found() {
ip link | awk '/mtu/ {gsub(":",""); printf "\t%s", $2} END {printf "\n"}'
}

test_connect() {
if ! $(ip addr show | grep "state UP" &>/dev/null)
then
    printf "\n$( penguinista ) .: $NAME requires an active network interface."
    printf "\nINTERFACES FOUND\n"
    interface_found
    exit 1
fi
}

test_condition() {
test_root
test_connect
}

invalid_reply() {
printf "\n'$REPLY' is invalid input...\n"
}

invalid_reply_yn() {
printf "\n'$REPLY' is invalid input. Please select 'Y(es)' or 'N(o)'...\n"
}

confirm_start() {
while :
do
    read -n 1 -p "Run script now? [yN] > "
    if [[ $REPLY == [yY] ]]
    then
        printf "\nLet's roll then ...\n"
        sleep 2
        break
    elif [[ $REPLY == [nN] || $REPLY == "" ]]
    then
        penguinista
        exit
    else
        invalid_reply_yn
    fi
done
}

config_prefer() {
cat > $PREFER << _EOF_
# Configure default preferences in package installation
# * unlisted repositories are auto-ranked 500
# * installed packages are ranked 100

Package: *
Pin: release a=unstable
Pin-Priority: 900

Package: *
Pin: release a=experimental
Pin-Priority: 1
_EOF_
}

apt_prefer() {
if [[ -e $PREFER ]]
then
    cp $PREFER ${PREFER}.$(date +%Y%m%dT%H%M%S).bak
fi
config_prefer
}

config_source() {
cat > $LIST << _EOF_
### unstable ###
deb $DEB unstable main contrib non-free
deb-src $DEB unstable main contrib non-free

### $TEST ###
deb $DEB $TEST main contrib non-free
#deb-src $DEB $TEST main contrib non-free

### $TEST security ###
deb http://security.debian.org/ $TEST/updates main contrib non-free
#deb-src http://security.debian.org/ $TEST/updates main contrib non-free

### experimental ###
deb $DEB experimental main

### multimedia ###
deb http://www.deb-multimedia.org unstable main non-free
_EOF_
}

apt_source() {
if [[ -e $LIST ]]
then
    cp $LIST ${LIST}.$(date +%Y%m%dT%H%M%S).bak
fi
clear
config_source
apt-get update
}

apt_key() {
clear
apt-get install -y debian-archive-keyring
apt-get install deb-multimedia-keyring
apt-get install pkg-mozilla-archive-keyring
apt-get update
apt-get -y dist-upgrade
}

apt_purge() {
local PURGE
PURGE="gdm3 gnome-system-tools gvfs* nautilus* libnautilus* \
notification-daemon tumbler* libtumbler* thunar* libthunar* \
udisk* libudisk*"
clear
apt-get --purge remove $PURGE
}

pkg_console() {
local CONSOLE
CONSOLE="dkms linux-headers-$(uname -r) module-assistant \
apt-file apt-listbugs apt-listchanges acpi acpi-support acpitool \
anacron colordiff console-setup cowsay cryptsetup dnsutils dosfstools \
gpm htop input-utils ntfs-3g lxsplit par2 p7zip-full unrar unzip rsync \
sudo sl sysv-rc-conf tmux vim ssh-askpass keychain whois xz-utils"
clear
apt-get install -y $CONSOLE
}

pkg_xorg() {
local XPKGS
XPKGS="xorg x11-utils xbacklight xdotool xfonts-terminus xterm"
clear
apt-get install -y $XPKGS
}

pkg_theme() {
#
# Numix GTK3 Theme
# ----------------
# * Numix for GTK3.6+ - satya164.deviantart.com/art/Numix-GTK3-theme-360223962
# * includes GTK2 + Openbox + Xfce support
# * download, unzip, place archive in ~/.themes
#
# Faenza-Dark-Crunchbang Icons
# ----------------------------
# * download *.deb and install
#   packages.crunchbang.org/waldorf/pool/main/faenza-crunchbang-icon-theme*
#
# Droid Sans Fonts
# ----------------
# * fonts-droid*.deb
#
# Theme Config Utils
# ------------------
# * Openbox: obconf
# * GTK+LXDE: lxappearance
# * Xfce4: xfce4-settings-manager
# * QT: qtconfig-qt4
# * Xfce4: xfce4-settings
local THEME
THEME="fonts-liberation fonts-droid gtk2-engines gtk2-engines-murrine \
libgnomeui-0 lxde-icon-theme"
clear
apt-get install -y $THEME
}

pkg_openbox() {
local OPENBOX
OPENBOX="openbox obconf eject feh gksu gsimplecal leafpad \
lxappearance lxappearance-obconf menu network-manager-gnome \
pavucontrol qt4-qtconfig rxvt-unicode spacefm udevil scrot \
suckless-tools tint2 xarchiver xfce4-notifyd xfce4-power-manager \
xfce4-settings xfce4-volumed xscreensaver zenity"
clear
apt-get install -y $OPENBOX
pkg_theme
}

pkg_dvd() {
local DVD
DVD="cd-discid k3b libdvdcss2 libdvdnav4 libdvdread4"
clear
cat << _EOF_
K3b is a useful program for burning CD/DVDs. If this computer includes
an optical drive it is a good program to have installed.

_EOF_
while :
do
    read -n 1 -p "Install k3b? [Yn] > "
    if [[ "$REPLY" == [yY] || "$REPLY" == "" ]]
    then
        printf "\nOK. Installing k3b...\n"
        sleep 2
        apt-get install -y $DVD
        break
    elif [[ "$REPLY" == [nN] ]]
    then
        printf "\nOK. Skipping over k3b...\n"
        sleep 2
        break
    else
        invalid_reply_yn
    fi  
done
}

pkg_experiment() {
local EX
EX="iceweasel"
clear
apt-get -t experimental -y install $EX
}

pkg_third_party() {
# Crunchbang Linux
# ================
local CRUNCHBANG
CRUNCHBANG="http://packages.crunchbang.org/waldorf/pool/main"
# pnmixer - volume mixer for the system tray
local PNMIXER
PNMIXER="pnmixer_0.5.1-crunchbang1_${ARCH}.deb"
if [[ ! -e ${APTCACHE}/${PNMIXER} ]]
then
    wget ${CRUNCHBANG}/${PNMIXER}
    dpkg -i $PNMIXER
    rm $PNMIXER
fi
# crunchbang icons
local ICONCR
ICONCR="faenza-crunchbang-icon-theme_1.2-crunchang1_all.deb"
if [[ ! -e ${APTCACHE}/${ICONCR} ]]
then
    wget ${CRUNCHBANG}/${ICONCR}
    dpkg -i $ICONCR
    rm $ICONCR
fi
}

config_alternative() {
clear
update-alternatives --config editor
clear
update-alternatives --config x-terminal-emulator
}

pkg_desktop() {
local GRAPHICS
GRAPHICS="gimp gimp-data-extras gimp-help-en imagemagick"
local NETWORK
NETWORK="dnsutils network-manager-gnome ssh-askpass keychain pan rsync \
transmission wireless-tools"
local BROWSER
BROWSER="flashplugin-nonfree icedtea-7-plugin openjdk-7-jre"
local OFFICE
OFFICE="libreoffice libreoffice-gtk libreoffice-help-en-us hunspell-en-ca"
local PROGRAM
PROGRAM="build-essential python-dev python-pip python-setuptools \
python-virtualenv"
local SOUND
SOUND="gstreamer0.10-ffmpeg gstreamer0.10-plugins-base \
gstreamer0.10-plugins-good gstreamer0.10-plugins-bad \
gstreamer0.10-plugins-ugly gstreamer0.10-pulseaudio \
aacgain alsa-utils flac id3 id3v2 lame libmp3lame0 \
mp3gain pulseaudio pulseaudio-utils pavucontrol \
rhythmbox vorbis-tools vorbisgain xfce4-volumed" 
local VIDEO
VIDEO="vlc ffmpeg"
local VIEWERS
VIEWERS="eog geeqie qpdfview"
local SYSTEM
SYSTEM="gdmap synaptic"
clear
while :
do
cat << _EOF_
A selection of extra packages suitable for a desktop environment...

GRAPHICS
$GRAPHICS
NETWORK
$NETWORK
BROWSER
iceweasel $BROWSER
OFFICE
$OFFICE
PROGRAMMING
$PROGRAM
SOUND
$SOUND
VIDEO
$VIDEO
VIEWERS
$VIEWERS
SYSTEM
$SYSTEM

_EOF_

read -n 1 -p "Do you want to install these extra applications? [Yn] > "

if [[ $REPLY == [yY] || $REPLY == "" ]]
then
    printf "\nOK. Installing extras...\n"
    sleep 2
    pkg_experiment
    pkg_third_party
    apt-get install -y $GRAPHICS $NETWORK $BROWSER $OFFICE $PROGRAM $SOUND \
    $VIDEO $VIEWERS $SYSTEM
    pkg_dvd
    break
elif [[ $REPLY == [nN] ]]
then
    printf "\nOK. Skipping over applications...\n"
    sleep 2
    break
else
    invalid_reply_yn
fi  
done
# Create links for some default commands
config_alternative
}

config_desktop() {
clear
while :
do
cat << _EOF_
Please select console-only or X environment:

0) Do not install an X environment
1) Openbox - lightweight window manager

_EOF_

read -n 1 -p "Your choice? [0-1] > "

case $REPLY in
    0)
        printf "\nOK. No X environment will be installed...\n"
        sleep 2
        pkg_console
        break
        ;;
    1)
        printf "\nOK. Installing Openbox...\n"
        sleep 2
        pkg_console
        pkg_xorg
        pkg_openbox
        pkg_desktop
        break
        ;;
    *)
        invalid_reply
        ;;
esac
done
}

config_blacklist_pcspkr() {
local PCSPKR
PCSPKR="/etc/modprobe.d/pcspkr-blacklist.conf"
if [[ -e $PCSPKR ]]
then
    cp $PCSPKR ${PCSPKR}.$(date +%Y%m%dT%H%M%S).bak
fi
cat >> $PCSPKR << _EOF_
# shutdown that annoying beep
# note: always run 'update-initramfs -u -k all' after modifying modules
blacklist pcspkr
_EOF_
}

config_blacklist() {
clear
config_blacklist_pcspkr
update-initramfs -u -k all
}

config_group() {
set +e
clear
local UGROUPS
UGROUPS="adm audio cdrom dialout dip floppy fuse netdev plugdev sudo \
vboxusers video users"
read -p "What will be your (non-root) user name? > " USERNAME
printf "\nHello ${USERNAME}!\n"
sleep 2
if [[ ! -d /home/${USERNAME} ]]
then
    adduser $USERNAME
fi
for i in ${UGROUPS[@]}
do
    adduser $USERNAME $i
done
set -e
}

config_locale() {
clear
dpkg-reconfigure locales
}

config_timezone() {
clear
dpkg-reconfigure tzdata
}

au_revoir() {
clear
printf "$( penguinista ) .: All done!\n"
}

#: START
test_condition
greeting
confirm_start

#: APT
apt_prefer
apt_source
apt_key

#: CONFIGURE
config_desktop
config_blacklist
config_group
config_locale
config_timezone

#: FINISH
apt_purge
au_revoir
