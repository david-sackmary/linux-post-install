#!/bin/bash
set -u
set -e
NAME="debian_c720_post_install"
DESCRIPTION="unstable/sid branch configuration"
EXTRADIR="extra/c720/debian"
GITHUB="https://github.com/vonbrownie"
SOURCE="${GITHUB}/linux-post-install/blob/master/debian_c720_post_install"
# Notes
# * Install Debian Wheezy Screenshot Tour
#   http://www.circuidipity.com/install-debian-wheezy-screenshot-tour.html

# LICENSE
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License (GPLv2) published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.

penguinista() {
cat << _EOF_

(O<
(/)_
_EOF_
}

long_description() {
clear
cat << _EOF_

$( penguinista ) .: $NAME -- $DESCRIPTION :.

Howdy! Ideally this script is run following a fresh installation of
Debian GNU/Linux on an Acer C720 Chromebook.

See: "Install Debian Wheezy Screenshot Tour"
http://www.circuidipity.com/install-debian-wheezy-screenshot-tour.html

This system will be configured to track Debian's unstable/sid branch
and install the Openbox window manager + extra apps suitable for a
desktop environment.

_EOF_
}

invalid_reply() {
printf "\n'$REPLY' is invalid input...\n"
}

invalid_reply_yn() {
printf "\n'$REPLY' is invalid input. Please select 'Y(es)' or 'N(o)'...\n"
}

confirm_start() {
while :
do
    read -n 1 -p "Run script now? [yN] > "
    if [[ $REPLY == [yY] ]]
    then
        printf "\nLet's roll then ...\n"
        sleep 2
        break
    elif [[ $REPLY == [nN] || $REPLY == "" ]]
    then
        penguinista
        exit
    else
        invalid_reply_yn
    fi
done
}

test_root() {
if [[ $UID -ne 0 ]]
then
    printf "\n$( penguinista ) .: $NAME requires ROOT privileges to do its job.\n"
    exit 1
fi
}

interface_found() {
ip link | awk '/mtu/ {gsub(":",""); printf "\t%s", $2} END {printf "\n"}'
}

test_connect() {
if ! $(ip addr show | grep "state UP" &>/dev/null)
then
    printf "\n$( penguinista ) .: $NAME requires an active network interface."
    printf "\nINTERFACES FOUND\n"
    interface_found
    exit 1
fi
}

test_extradir() {
if [[ ! -d $EXTRADIR ]]
then
    printf "\n$( penguinista ) .: '$EXTRADIR' not found.\n"
    exit 1
fi
}

test_condition() {
test_root
test_connect
test_extradir
}

apt_prefer() {
local PREFER
PREFER="/etc/apt/preferences"
if [[ -e $PREFER ]]
then
    cp $PREFER ${PREFER}.$(date +%Y%m%dT%H%M%S).bak
fi
cat > $PREFER << _EOF_
# Configure default preferences in package installation
# * unlisted repositories are auto-ranked 500
# * installed packages are ranked 100

Package: *
Pin: release a=unstable
Pin-Priority: 900

Package: *
Pin: release a=experimental
Pin-Priority: 1
_EOF_
}

apt_source() {
local LIST
LIST="/etc/apt/sources.list"
local DEB
DEB="http://http.debian.net/debian/"
local TEST
TEST="jessie"
if [[ -e $LIST ]]
then
    cp $LIST ${LIST}.$(date +%Y%m%dT%H%M%S).bak
fi
clear
cat > $LIST << _EOF_
### unstable ###
deb $DEB unstable main contrib non-free
deb-src $DEB unstable main contrib non-free

### $TEST ###
deb $DEB $TEST main contrib non-free
#deb-src $DEB $TEST main contrib non-free

### $TEST security ###
deb http://security.debian.org/ $TEST/updates main contrib non-free
#deb-src http://security.debian.org/ $TEST/updates main contrib non-free

### experimental ###
deb $DEB experimental main

### multimedia ###
deb http://www.deb-multimedia.org unstable main non-free
_EOF_
apt-get update
}

apt_key() {
clear
apt-get install -y debian-archive-keyring
apt-get install deb-multimedia-keyring
apt-get install pkg-mozilla-archive-keyring
apt-get update
apt-get -y dist-upgrade
}

apt_pkg_list() {
local PKGS
PKGS=$(mktemp)
local PKGLIST
PKGLIST="${EXTRADIR}/deb-pkg-list"
clear
apt-cache dumpavail > "$PKGS"
dpkg --merge-avail "$PKGS"
rm -f "$PKGS"
dpkg --clear-selections
dpkg --set-selections < $PKGLIST
apt-get dselect-upgrade
}

apt_purge() {
local PURGE
PURGE="gdm3 gnome-system-tools gvfs* nautilus* libnautilus* \
notification-daemon tumbler* libtumbler* thunar* libthunar* \
udisk* libudisk*"
clear
apt-get --purge remove $PURGE
}

pkg_experiment() {
local EX
EX="iceweasel"
clear
apt-get -t experimental -y install $EX
}

pkg_third_party() {
local ARCH
ARCH=$(dpkg --print-architecture)
local DPKG
DPKG="/var/lib/dpkg/info"
# Crunchbang Linux
# ================
local CRUNCHBANG
CRUNCHBANG="http://packages.crunchbang.org/waldorf/pool/main"
# pnmixer - volume mixer for the system tray
local PNMIXER
PNMIXER="pnmixer"
local PNMIXER_DEB
PNMIXER_DEB="pnmixer_0.5.1-crunchbang1_${ARCH}.deb"
# crunchbang icons
local CB_ICON
CB_ICON="faenza-crunchbang-icon-theme"
local CB_ICON_DEB
CB_ICON_DEB="faenza-crunchbang-icon-theme_1.2-crunchang1_all.deb"
if [[ ! -e "${DPKG}/${PNMIXER}.list" || ! -e "${DPKG}/${CB_ICON}.list" ]]
then
    clear
    wget ${CRUNCHBANG}/${PNMIXER_DEB}
    wget ${CRUNCHBANG}/${CB_ICON_DEB}
    dpkg -i $PNMIXER_DEB
    dpkg -i $CB_ICON_DEB
    rm $PNMIXER_DEB
    rm $CB_ICON_DEB
fi
}

config_alternative() {
clear
update-alternatives --config editor
clear
update-alternatives --config x-terminal-emulator
}

config_blacklist_pcspkr() {
local PCSPKR
PCSPKR="/etc/modprobe.d/pcspkr-blacklist.conf"
if [[ -e $PCSPKR ]]
then
    cp $PCSPKR ${PCSPKR}.$(date +%Y%m%dT%H%M%S).bak
fi
cat >> $PCSPKR << _EOF_
# shutdown that annoying beep
# note: always run 'update-initramfs -u -k all' after modifying modules
blacklist pcspkr
_EOF_
}

config_blacklist() {
clear
config_blacklist_pcspkr
update-initramfs -u -k all
}

config_group() {
set +e
clear
local UGROUPS
UGROUPS="adm audio cdrom dialout dip floppy fuse netdev plugdev sudo \
vboxusers video users"
read -p "What will be your (non-root) user name? > " USERNAME
printf "\nHello ${USERNAME}!\n"
sleep 2
if [[ ! -d /home/${USERNAME} ]]
then
    adduser $USERNAME
fi
for i in ${UGROUPS[@]}
do
    adduser $USERNAME $i
done
set -e
}

config_locale() {
clear
dpkg-reconfigure locales
}

config_timezone() {
clear
dpkg-reconfigure tzdata
}

au_revoir() {
clear
printf "$( penguinista ) .: All done!\n"
}

#: START
long_description
confirm_start
test_condition

#: APT
apt_prefer
apt_source
apt_key
apt_pkg_list
pkg_experiment
pkg_third_party

#: CONFIGURE
config_alternative
config_blacklist
config_group
config_locale
config_timezone

#: FINISH
apt_purge
au_revoir
